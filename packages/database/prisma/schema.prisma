// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Platform Models

model Tenant {
  id            String      @id @default(cuid())
  name          String
  subdomain     String      @unique
  customDomain  String?     @unique
  logo          String?
  primaryColor  String?
  secondaryColor String?
  status        TenantStatus @default(ACTIVE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // JSON fields for complex data
  settings      Json        @default("{}")
  contactInfo   Json        @default("{}")
  billingInfo   Json?
  plan          Json        @default("{}")

  // Relations
  users         TenantUser[]
  moduleInstallations ModuleInstallation[]
  events        Event[]
  sessions      Session[]

  @@map("tenants")
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  TRIAL
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  avatar        String?
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  passwordHash  String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relations
  tenantUsers   TenantUser[]
  sessions      Session[]
  studentProfile StudentProfile?

  @@map("users")
}

model TenantUser {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String
  role        UserRole
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // JSON fields for complex data
  permissions Json     @default("[]")
  preferences Json     @default("{}")
  profile     Json     @default("{}")

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tenantId, userId])
  @@map("tenant_users")
}

enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  PRINCIPAL
  VICE_PRINCIPAL
  TEACHER
  STUDENT
  PARENT
  STAFF
  LIBRARIAN
  ACCOUNTANT
  NURSE
  SECURITY
}

model Session {
  id           String    @id @default(cuid())
  userId       String
  tenantId     String
  token        String    @unique
  refreshToken String    @unique
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  userAgent    String?
  ipAddress    String?
  isActive     Boolean   @default(true)

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Module System Models

model Module {
  id            String    @id
  name          String
  version       String
  description   String
  author        String
  category      String
  icon          String?
  homepage      String?
  repository    String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // JSON fields for complex module data
  manifest      Json      @default("{}")
  pricing       Json?

  // Relations
  installations ModuleInstallation[]

  @@unique([id, version])
  @@map("modules")
}

model ModuleInstallation {
  id          String                @id @default(cuid())
  tenantId    String
  moduleId    String
  version     String
  status      ModuleInstallationStatus @default(INSTALLING)
  config      Json                  @default("{}")
  installedAt DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  error       String?

  // Relations
  tenant      Tenant                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  module      Module                @relation(fields: [moduleId, version], references: [id, version])

  @@unique([tenantId, moduleId])
  @@map("module_installations")
}

enum ModuleInstallationStatus {
  INSTALLING
  INSTALLED
  UNINSTALLING
  ERROR
}

// Event System Models

model Event {
  id          String   @id @default(cuid())
  type        String
  source      String   // Module ID
  tenantId    String
  timestamp   DateTime @default(now())
  data        Json     @default("{}")
  metadata    Json?

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([type, tenantId])
  @@index([source, tenantId])
  @@index([timestamp])
  @@map("events")
}

model EventSubscription {
  id        String   @id @default(cuid())
  eventType String
  moduleId  String
  handler   String
  active    Boolean  @default(true)
  priority  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([moduleId])
  @@map("event_subscriptions")
}

// Permission System

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String
  resource    String
  action      String
  conditions  Json?  @default("[]")

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(cuid())
  role         UserRole
  permissionId String
  tenantId     String?  // null for global permissions

  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId, tenantId])
  @@map("role_permissions")
}

// Academic Module Models (Core module data)

model AcademicYear {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  semesters        Semester[]
  enrollments      StudentEnrollment[]
  gradeRecords     GradeRecord[]
  reportCards      ReportCard[]
  feeStructures    FeeStructure[]

  @@unique([tenantId, name])
  @@map("academic_years")
}

model Semester {
  id             String      @id @default(cuid())
  tenantId       String
  academicYearId String
  name           String
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)
  classes        Class[]
  gradeRecords   GradeRecord[]
  reportCards    ReportCard[]

  @@unique([tenantId, academicYearId, name])
  @@map("semesters")
}

model Grade {
  id          String   @id @default(cuid())
  tenantId    String
  name        String   // e.g., "Grade 1", "Kindergarten", "10th Grade"
  level       Int      // Numeric level for sorting
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  classes       Class[]
  subjects      Subject[]
  enrollments   StudentEnrollment[]
  feeStructures FeeStructure[]

  @@unique([tenantId, name])
  @@unique([tenantId, level])
  @@map("grades")
}

model Class {
  id          String   @id @default(cuid())
  tenantId    String
  gradeId     String
  semesterId  String
  name        String   // e.g., "Section A", "Class 1A"
  capacity    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  grade         Grade           @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  semester      Semester        @relation(fields: [semesterId], references: [id], onDelete: Cascade)
  enrollments   StudentEnrollment[]
  attendance    Attendance[]
  assessments   Assessment[]
  timetableEntries TimetableEntry[]

  @@unique([tenantId, gradeId, semesterId, name])
  @@map("classes")
}

model Subject {
  id          String   @id @default(cuid())
  tenantId    String
  gradeId     String
  name        String
  code        String
  description String?
  color       String?
  credits     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  grade        Grade           @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  attendance   Attendance[]
  gradeRecords GradeRecord[]
  assessments  Assessment[]
  timetableEntries TimetableEntry[]

  @@unique([tenantId, gradeId, code])
  @@map("subjects")
}

// Student Profile Extension
model StudentProfile {
  id            String   @id @default(cuid())
  tenantId      String
  userId        String   @unique
  studentId     String
  admissionDate DateTime
  graduationDate DateTime?
  currentGrade  String
  section       String?
  rollNumber    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // JSON fields for complex data
  medicalInfo   Json?    @default("{}")
  academicInfo  Json     @default("{}")
  transportInfo Json?    @default("{}")

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollments   StudentEnrollment[]
  attendance    Attendance[]
  gradeRecords  GradeRecord[]
  assessmentSubmissions AssessmentSubmission[]
  reportCards   ReportCard[]
  payments      Payment[]

  @@unique([tenantId, studentId])
  @@unique([tenantId, rollNumber])
  @@map("student_profiles")
}

// Teacher Profile Extension  
model TeacherProfile {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String   @unique
  employeeId   String
  hireDate     DateTime
  department   String
  experience   Int      // years
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // JSON fields for complex data
  subjects       Json     @default("[]")
  qualifications Json     @default("[]")
  salary         Json?
  workSchedule   Json?

  @@unique([tenantId, employeeId])
  @@map("teacher_profiles")
}

// Parent Profile Extension
model ParentProfile {
  id           String   @id @default(cuid())
  tenantId     String
  userId       String   @unique
  relationship String   // father, mother, guardian, etc.
  occupation   String?
  workplace    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // JSON field for children IDs
  children     Json     @default("[]")

  @@map("parent_profiles")
}

// Student Management Models

// Student Enrollment
model StudentEnrollment {
  id                String   @id @default(cuid())
  tenantId          String
  studentId         String
  academicYearId    String
  gradeId           String
  classId           String
  admissionNumber   String
  admissionDate     DateTime
  status            EnrollmentStatus @default(ACTIVE)
  previousSchool    String?
  transferCertificate String?
  medicalInfo       Json?
  emergencyContacts Json     @default("[]")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  student       StudentProfile @relation(fields: [studentId], references: [id])
  academicYear  AcademicYear   @relation(fields: [academicYearId], references: [id])
  grade         Grade          @relation(fields: [gradeId], references: [id])
  class         Class          @relation(fields: [classId], references: [id])

  @@unique([tenantId, admissionNumber])
  @@unique([tenantId, studentId, academicYearId])
  @@index([tenantId, status])
  @@map("student_enrollments")
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  TRANSFERRED
  GRADUATED
  DROPPED
}

// Attendance Management
model Attendance {
  id              String         @id @default(cuid())
  tenantId        String
  studentId       String
  classId         String
  subjectId       String?
  date            DateTime       @db.Date
  status          AttendanceStatus
  timeIn          DateTime?
  timeOut         DateTime?
  remarks         String?
  markedByUserId  String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  student   StudentProfile @relation(fields: [studentId], references: [id])
  class     Class          @relation(fields: [classId], references: [id])
  subject   Subject?       @relation(fields: [subjectId], references: [id])

  @@unique([tenantId, studentId, date, subjectId])
  @@index([tenantId, date])
  @@index([tenantId, classId, date])
  @@map("attendance")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  HALF_DAY
}

// Academic Records & Grades
model GradeRecord {
  id              String      @id @default(cuid())
  tenantId        String
  studentId       String
  subjectId       String
  assessmentId    String?
  academicYearId  String
  semesterId      String?
  gradeType       GradeType
  maxMarks        Float
  obtainedMarks   Float
  percentage      Float
  grade           String?
  remarks         String?
  gradedByUserId  String
  gradedAt        DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  student      StudentProfile @relation(fields: [studentId], references: [id])
  subject      Subject        @relation(fields: [subjectId], references: [id])
  assessment   Assessment?    @relation(fields: [assessmentId], references: [id])
  academicYear AcademicYear   @relation(fields: [academicYearId], references: [id])
  semester     Semester?      @relation(fields: [semesterId], references: [id])

  @@index([tenantId, studentId])
  @@index([tenantId, subjectId])
  @@index([tenantId, academicYearId])
  @@map("grade_records")
}

enum GradeType {
  QUIZ
  ASSIGNMENT
  MIDTERM
  FINAL
  PROJECT
  PARTICIPATION
  OTHER
}

// Assessment/Examination System
model Assessment {
  id              String         @id @default(cuid())
  tenantId        String
  title           String
  description     String?
  assessmentType  AssessmentType
  subjectId       String
  classId         String
  totalMarks      Float
  passingMarks    Float
  duration        Int?           // in minutes
  instructions    String?
  scheduledDate   DateTime?
  startTime       DateTime?
  endTime         DateTime?
  status          AssessmentStatus @default(DRAFT)
  createdByUserId String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  subject      Subject        @relation(fields: [subjectId], references: [id])
  class        Class          @relation(fields: [classId], references: [id])
  questions    Question[]
  submissions  AssessmentSubmission[]
  gradeRecords GradeRecord[]

  @@index([tenantId, assessmentType])
  @@index([tenantId, subjectId])
  @@index([tenantId, classId])
  @@map("assessments")
}

enum AssessmentType {
  QUIZ
  ASSIGNMENT
  MIDTERM_EXAM
  FINAL_EXAM
  PROJECT
  PRACTICAL
  ORAL
}

enum AssessmentStatus {
  DRAFT
  PUBLISHED
  ACTIVE
  COMPLETED
  CANCELLED
}

// Question Bank
model Question {
  id            String       @id @default(cuid())
  tenantId      String
  assessmentId  String?
  type          QuestionType
  question      String
  options       Json?        // for multiple choice
  correctAnswer String?
  marks         Float        @default(1)
  difficulty    DifficultyLevel @default(MEDIUM)
  explanation   String?
  tags          Json         @default("[]")
  createdByUserId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  assessment Assessment? @relation(fields: [assessmentId], references: [id])

  @@index([tenantId, type])
  @@index([tenantId, difficulty])
  @@map("questions")
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
  FILL_IN_BLANK
  MATCHING
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

// Assessment Submissions
model AssessmentSubmission {
  id           String   @id @default(cuid())
  tenantId     String
  assessmentId String
  studentId    String
  answers      Json     @default("{}")
  score        Float?
  percentage   Float?
  submittedAt  DateTime?
  autoGraded   Boolean  @default(false)
  manualReview Boolean  @default(false)
  feedback     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  assessment Assessment     @relation(fields: [assessmentId], references: [id])
  student    StudentProfile @relation(fields: [studentId], references: [id])

  @@unique([tenantId, assessmentId, studentId])
  @@index([tenantId, submittedAt])
  @@map("assessment_submissions")
}

// Report Cards
model ReportCard {
  id             String   @id @default(cuid())
  tenantId       String
  studentId      String
  academicYearId String
  semesterId     String?
  overallGrade   String?
  overallPercentage Float?
  rank           Int?
  totalStudents  Int?
  attendance     Json?    // attendance summary
  remarks        String?
  teacherComments String?
  principalComments String?
  generatedAt    DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  student      StudentProfile @relation(fields: [studentId], references: [id])
  academicYear AcademicYear   @relation(fields: [academicYearId], references: [id])
  semester     Semester?      @relation(fields: [semesterId], references: [id])

  @@unique([tenantId, studentId, academicYearId, semesterId])
  @@index([tenantId, academicYearId])
  @@map("report_cards")
}

// Communication & Messaging System
model Message {
  id          String      @id @default(cuid())
  tenantId    String
  fromUserId  String
  toUserIds   Json        @default("[]")
  subject     String?
  content     String
  messageType MessageType @default(DIRECT)
  priority    Priority    @default(NORMAL)
  readBy      Json        @default("[]")
  attachments Json        @default("[]")
  parentId    String?     // for replies
  sentAt      DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Self-relation for replies
  parent   Message?  @relation("MessageReplies", fields: [parentId], references: [id])
  replies  Message[] @relation("MessageReplies")

  @@index([tenantId, fromUserId])
  @@index([tenantId, messageType])
  @@map("messages")
}

enum MessageType {
  DIRECT
  ANNOUNCEMENT
  BROADCAST
  SYSTEM
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// Notifications
model Notification {
  id         String             @id @default(cuid())
  tenantId   String
  userId     String
  title      String
  content    String
  type       NotificationType
  data       Json?              // additional data
  read       Boolean            @default(false)
  readAt     DateTime?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([tenantId, userId])
  @@index([tenantId, type])
  @@map("notifications")
}

enum NotificationType {
  ASSIGNMENT
  GRADE
  ATTENDANCE
  ANNOUNCEMENT
  PAYMENT
  EVENT
  SYSTEM
}

// Timetable & Scheduling
model TimeSlot {
  id        String   @id @default(cuid())
  tenantId  String
  name      String   // e.g., "Period 1", "Morning Break"
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  dayOfWeek Int      // 1-7 (Monday-Sunday)
  isBreak   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  timetableEntries TimetableEntry[]

  @@unique([tenantId, name, dayOfWeek])
  @@index([tenantId, dayOfWeek])
  @@map("time_slots")
}

model TimetableEntry {
  id         String   @id @default(cuid())
  tenantId   String
  classId    String
  subjectId  String?
  teacherId  String?
  timeSlotId String
  roomId     String?
  dayOfWeek  Int      // 1-7 (Monday-Sunday)
  isActive   Boolean  @default(true)
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  class    Class    @relation(fields: [classId], references: [id])
  subject  Subject? @relation(fields: [subjectId], references: [id])
  timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id])

  @@unique([tenantId, classId, timeSlotId, dayOfWeek])
  @@index([tenantId, classId])
  @@index([tenantId, teacherId])
  @@map("timetable_entries")
}

// Resource Management
model Room {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  code        String?
  roomType    RoomType @default(CLASSROOM)
  capacity    Int?
  location    String?
  facilities  Json     @default("[]")
  isAvailable Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([tenantId, name])
  @@unique([tenantId, code])
  @@index([tenantId, roomType])
  @@map("rooms")
}

enum RoomType {
  CLASSROOM
  LAB
  LIBRARY
  AUDITORIUM
  GYMNASIUM
  OFFICE
  OTHER
}

// Financial Management
model FeeStructure {
  id             String      @id @default(cuid())
  tenantId       String
  name           String
  academicYearId String
  gradeId        String?
  feeType        FeeType
  amount         Float
  dueDate        DateTime?
  isRecurring    Boolean     @default(false)
  frequency      Frequency?  // for recurring fees
  description    String?
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id])
  grade        Grade?       @relation(fields: [gradeId], references: [id])
  payments     Payment[]

  @@index([tenantId, feeType])
  @@index([tenantId, academicYearId])
  @@map("fee_structures")
}

enum FeeType {
  TUITION
  ADMISSION
  LIBRARY
  LABORATORY
  SPORTS
  TRANSPORT
  EXAM
  LATE_FEE
  OTHER
}

enum Frequency {
  MONTHLY
  QUARTERLY
  ANNUALLY
}

model Payment {
  id             String        @id @default(cuid())
  tenantId       String
  studentId      String
  feeStructureId String
  amount         Float
  paidAmount     Float?
  paymentDate    DateTime?
  dueDate        DateTime
  status         PaymentStatus @default(PENDING)
  paymentMethod  PaymentMethod?
  transactionId  String?
  receiptNumber  String?
  remarks        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  student      StudentProfile @relation(fields: [studentId], references: [id])
  feeStructure FeeStructure   @relation(fields: [feeStructureId], references: [id])

  @@unique([tenantId, receiptNumber])
  @@index([tenantId, studentId])
  @@index([tenantId, status])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CHEQUE
  CARD
  BANK_TRANSFER
  UPI
  WALLET
  OTHER
}

// Events & Calendar
model CalendarEvent {
  id          String      @id @default(cuid())
  tenantId    String
  title       String
  description String?
  eventType   CalendarEventType
  startDate   DateTime
  endDate     DateTime?
  isAllDay    Boolean     @default(false)
  location    String?
  organizer   String?
  targetAudience Json     @default("[]") // roles, grades, classes
  attachments Json        @default("[]")
  isPublic    Boolean     @default(false)
  createdByUserId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([tenantId, eventType])
  @@index([tenantId, startDate])
  @@map("calendar_events")
}

enum CalendarEventType {
  ACADEMIC
  EXAM
  HOLIDAY
  SPORTS
  CULTURAL
  MEETING
  OTHER
}

// Audit Log
model AuditLog {
  id          String   @id @default(cuid())
  tenantId    String
  userId      String?
  action      String
  resource    String
  resourceId  String?
  oldValues   Json?
  newValues   Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())

  @@index([tenantId, action])
  @@index([tenantId, resource])
  @@index([tenantId, userId])
  @@index([timestamp])
  @@map("audit_logs")
}